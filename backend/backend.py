import openai
import os
from rich.console import Console
from dotenv import load_dotenv
from elevenlabs import set_api_key, generate, play, save

load_dotenv()

openai.api_key = os.getenv('OPENAI_API_KEY')
set_api_key(os.getenv('ELEVENLABS_API_KEY'))
if not openai.api_key:
    raise ValueError("OpenAI API Key not found in environment variables")



class AiMeditationForMeditationEnthusiast:
    """
        Class for generating a meditation for a meditation enthusiast.
    """
    def __init__(self, user_name, preferences):
        self.user_name = user_name
        self.preferences = preferences
        self.console = Console()

    def generate_meditation_text(self, goal):
        """Generates a meditation text for a user with a given goal.

        Parameters
        ----------
        goal : str
            goal for the desired meditation.

        Returns
        -------
        str
            meditation text generated by openai model.
        """
        prompt = f"Create a personalized meditation script for {self.user_name} with a goal of {goal}, considering the following preferences: {self.preferences} in less than 2500 characters"
        response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
                    {"role": "system", "content": "You are a meditation expert."},
                    {"role": "user", "content": prompt},
                ],
        max_tokens=700,
        temperature=0.7
        )
        meditation_text = response['choices'][0]['message']['content']

        return meditation_text


    def generate_meditation(self, goal):
        """
        Generates a meditation for a user with a given goal.

        Parameters
        ----------
        goal : str
            goal for the desired meditation.

        Returns
        -------
        str
            meditation text generated by openai model.
        """
        self.console.log(f"Generating meditation for {self.user_name} with a goal of {goal}")
        meditation_text = self.generate_meditation_text(goal)
        self.console.log(meditation_text)
        return meditation_text

    def generate_prompt_suggestions(self):
        """Generates prompt suggestions for meditation."""
        prompt = f"Generate some prompt suggestions for meditation."
        response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
                    {"role": "system", "content": "You are a meditation expert."},
                    {"role": "user", "content": prompt},
                ],
        max_tokens=700,
        temperature=0.7
        )
        return response['choices'][0]['message']['content']
    
    def generate_voiceover(self, meditation_text): 
        """Generates a voiceover from meditation text

        Parameters
        ----------
        meditation_text : str
            meditation text generated by openai model.
        """
        audio = generate(
        text= meditation_text,
        voice="fyBecD9ob2G4owaPSkMt", # voice = fyBecD9ob2G4owaPSkMt # this is id not sure if this is gonna work
        model="eleven_monolingual_v1"
        )
        # # uncomment to play audio when it's generated. 
        # play(audio)
        file_path = f"./audio_files/{self.user_name}_meditation.wav"
        save(
            audio = audio, # Audio bytes (returned by generate)
            filename = file_path# Filename to save audio to (e.g. "audio.wav")
        ) 
        return file_path


# def run_app():
#     """
#     Main entry point for application.
#     """
#     user_name = input("Enter your name: ")
#     goal = input("Enter your meditation goal: ")

#     prefers_guided_meditation = input("Do you prefer guided meditation? (Yes/No): ") == "Yes"
#     background_sounds = input("Enter your preferred background sounds (comma-separated): ").split(',')
#     duration = input("Enter your preferred duration (5 minutes, 15 minutes, 30 minutes, 60 minutes): ")

#     preferences = {
#         "prefers_guided_meditation": prefers_guided_meditation,
#         "background_sounds": background_sounds,
#         "duration": duration
#     }



#     user = AiMeditationForMeditationEnthusiast(user_name, preferences)
#     meditation_text = user.generate_meditation(goal)
#     # prompt_suggestions = user.generate_prompt_suggestions()
#     # print("AI suggested prompts: ", prompt_suggestions)
#     meditation_text = meditation_text[:2500]
#     user.generate_voiceover(meditation_text)
# if __name__ == "__main__":
#     run_app()