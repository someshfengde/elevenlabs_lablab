import openai
import os
from rich.console import Console
from dotenv import load_dotenv
from elevenlabs import set_api_key, generate, play, save
from pydub import AudioSegment

load_dotenv()

openai.api_key = os.getenv('OPENAI_API_KEY')
print(os.getenv('ELEVENLABS_API_KEY'))
set_api_key(os.getenv('ELEVENLABS_API_KEY'))
if not openai.api_key:
    raise ValueError("OpenAI API Key not found in environment variables")

class AiMeditationForMeditationEnthusiast:
    """
        Class for generating a meditation for a meditation enthusiast.
    """
    def __init__(self, user_name, preferences):
        self.user_name = user_name
        self.preferences = preferences
        self.console = Console()

    def generate_meditation_text(self, goal):
        """Generates a meditation text for a user with a given goal.

        Parameters
        ----------
        goal : str
            goal for the desired meditation.

        Returns
        -------
        str
            meditation text generated by openai model.
        """
        prompt = f"Create a personalized meditation script for {self.user_name} with a goal of {goal}, considering the following preferences: {self.preferences} in less than 2500 characters"
        response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
                    {"role": "system", "content": "You are a meditation expert."},
                    {"role": "user", "content": prompt},
                ],
        max_tokens=700,
        temperature=0.7
        )
        meditation_text = response['choices'][0]['message']['content']

        return meditation_text


    def generate_meditation(self, goal):
        """
        Generates a meditation for a user with a given goal.

        Parameters
        ----------
        goal : str
            goal for the desired meditation.

        Returns
        -------
        str
            meditation text generated by openai model.
        """
        self.console.log(f"Generating meditation for {self.user_name} with a goal of {goal}")
        meditation_text = self.generate_meditation_text(goal)
        self.console.log(meditation_text)
        return meditation_text

    def generate_prompt_suggestions(self):
        """Generates prompt suggestions for meditation."""
        prompt = f"Generate some prompt suggestions for meditation."
        response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
                    {"role": "system", "content": "You are a meditation expert."},
                    {"role": "user", "content": prompt},
                ],
        max_tokens=700,
        temperature=0.7
        )
        return response['choices'][0]['message']['content']

    def generate_voiceover(self, meditation_text): 
        """Generates a voiceover from meditation text

        Parameters
        ----------
        meditation_text : str
            meditation text generated by openai model.
        """
        audio = generate(
        text= meditation_text,
        voice="EXAVITQu4vr4xnSDxMaL", 
        model="eleven_monolingual_v1"
        )

        mp3_file_path = os.path.join(".", "audio_files", f"{self.user_name}_meditation.mp3")
        os.makedirs(os.path.dirname(mp3_file_path), exist_ok=True)

        save(
            audio = audio,
            filename = mp3_file_path
        ) 

        # Convert .mp3 to .wav
        wav_file_path = mp3_file_path.replace('.mp3', '.wav')
        audio = AudioSegment.from_mp3(mp3_file_path)
        audio.export(wav_file_path, format='wav')

        return wav_file_path

import requests

url = "https://api.elevenlabs.io/v1/voices"

headers = {
  "Accept": "application/json",
  "xi-api-key": "df65b267eb31cc6af839be0fc95b679c"
}

response = requests.get(url, headers=headers)

print(response.text)